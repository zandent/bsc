// Copyright 2015 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"bytes"
	"errors"
	"fmt"
	"math/big"
	"math/rand"
	"sync"
	"time"
	"encoding/hex"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/gopool"
	"github.com/ethereum/go-ethereum/consensus"
	"github.com/ethereum/go-ethereum/consensus/misc"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/state/snapshot"
	"github.com/ethereum/go-ethereum/core/systemcontracts"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"github.com/ethereum/go-ethereum/rlp"
)

const (
	fullProcessCheck       = 21 // On diff sync mode, will do full process every fullProcessCheck randomly
	recentTime             = 1024 * 3
	recentDiffLayerTimeout = 5
	farDiffLayerTimeout    = 2
)

// StateProcessor is a basic Processor, which takes care of transitioning
// state from one point to another.
//
// StateProcessor implements Processor.
type StateProcessor struct {
	config *params.ChainConfig // Chain configuration options
	bc     *BlockChain         // Canonical block chain
	engine consensus.Engine    // Consensus engine used for block rewards
}

// NewStateProcessor initialises a new StateProcessor.
func NewStateProcessor(config *params.ChainConfig, bc *BlockChain, engine consensus.Engine) *StateProcessor {
	return &StateProcessor{
		config: config,
		bc:     bc,
		engine: engine,
	}
}

type LightStateProcessor struct {
	check int64
	StateProcessor
}

func NewLightStateProcessor(config *params.ChainConfig, bc *BlockChain, engine consensus.Engine) *LightStateProcessor {
	randomGenerator := rand.New(rand.NewSource(int64(time.Now().Nanosecond())))
	check := randomGenerator.Int63n(fullProcessCheck)
	return &LightStateProcessor{
		check:          check,
		StateProcessor: *NewStateProcessor(config, bc, engine),
	}
}

func (p *LightStateProcessor) Process(block *types.Block, statedb *state.StateDB, cfg vm.Config) (*state.StateDB, types.Receipts, []*types.Log, uint64, error) {
	allowLightProcess := true
	if posa, ok := p.engine.(consensus.PoSA); ok {
		allowLightProcess = posa.AllowLightProcess(p.bc, block.Header())
	}
	// random fallback to full process
	if allowLightProcess && block.NumberU64()%fullProcessCheck != uint64(p.check) && len(block.Transactions()) != 0 {
		var pid string
		if peer, ok := block.ReceivedFrom.(PeerIDer); ok {
			pid = peer.ID()
		}
		var diffLayer *types.DiffLayer
		var diffLayerTimeout = recentDiffLayerTimeout
		if time.Now().Unix()-int64(block.Time()) > recentTime {
			diffLayerTimeout = farDiffLayerTimeout
		}
		for tried := 0; tried < diffLayerTimeout; tried++ {
			// wait a bit for the diff layer
			diffLayer = p.bc.GetUnTrustedDiffLayer(block.Hash(), pid)
			if diffLayer != nil {
				break
			}
			time.Sleep(time.Millisecond)
		}
		if diffLayer != nil {
			if err := diffLayer.Receipts.DeriveFields(p.bc.chainConfig, block.Hash(), block.NumberU64(), block.Transactions()); err != nil {
				log.Error("Failed to derive block receipts fields", "hash", block.Hash(), "number", block.NumberU64(), "err", err)
				// fallback to full process
				return p.StateProcessor.Process(block, statedb, cfg)
			}

			receipts, logs, gasUsed, err := p.LightProcess(diffLayer, block, statedb)
			if err == nil {
				log.Info("do light process success at block", "num", block.NumberU64())
				return statedb, receipts, logs, gasUsed, nil
			}
			log.Error("do light process err at block", "num", block.NumberU64(), "err", err)
			p.bc.removeDiffLayers(diffLayer.DiffHash.Load().(common.Hash))
			// prepare new statedb
			statedb.StopPrefetcher()
			parent := p.bc.GetHeader(block.ParentHash(), block.NumberU64()-1)
			statedb, err = state.New(parent.Root, p.bc.stateCache, p.bc.snaps)
			if err != nil {
				return statedb, nil, nil, 0, err
			}
			statedb.SetExpectedStateRoot(block.Root())
			if p.bc.pipeCommit {
				statedb.EnablePipeCommit()
			}
			// Enable prefetching to pull in trie node paths while processing transactions
			statedb.StartPrefetcher("chain")
		}
	}
	// fallback to full process
	return p.StateProcessor.Process(block, statedb, cfg)
}

func (p *LightStateProcessor) LightProcess(diffLayer *types.DiffLayer, block *types.Block, statedb *state.StateDB) (types.Receipts, []*types.Log, uint64, error) {
	statedb.MarkLightProcessed()
	fullDiffCode := make(map[common.Hash][]byte, len(diffLayer.Codes))
	diffTries := make(map[common.Address]state.Trie)
	diffCode := make(map[common.Hash][]byte)

	snapDestructs, snapAccounts, snapStorage, err := statedb.DiffLayerToSnap(diffLayer)
	if err != nil {
		return nil, nil, 0, err
	}

	for _, c := range diffLayer.Codes {
		fullDiffCode[c.Hash] = c.Code
	}
	stateTrie, err := statedb.Trie()
	if err != nil {
		return nil, nil, 0, err
	}
	for des := range snapDestructs {
		stateTrie.TryDelete(des[:])
	}
	threads := gopool.Threads(len(snapAccounts))

	iteAccounts := make([]common.Address, 0, len(snapAccounts))
	for diffAccount := range snapAccounts {
		iteAccounts = append(iteAccounts, diffAccount)
	}

	errChan := make(chan error, threads)
	exitChan := make(chan struct{})
	var snapMux sync.RWMutex
	var stateMux, diffMux sync.Mutex
	for i := 0; i < threads; i++ {
		start := i * len(iteAccounts) / threads
		end := (i + 1) * len(iteAccounts) / threads
		if i+1 == threads {
			end = len(iteAccounts)
		}
		go func(start, end int) {
			for index := start; index < end; index++ {
				select {
				// fast fail
				case <-exitChan:
					return
				default:
				}
				diffAccount := iteAccounts[index]
				snapMux.RLock()
				blob := snapAccounts[diffAccount]
				snapMux.RUnlock()
				addrHash := crypto.Keccak256Hash(diffAccount[:])
				latestAccount, err := snapshot.FullAccount(blob)
				if err != nil {
					errChan <- err
					return
				}

				// fetch previous state
				var previousAccount types.StateAccount
				stateMux.Lock()
				enc, err := stateTrie.TryGet(diffAccount[:])
				stateMux.Unlock()
				if err != nil {
					errChan <- err
					return
				}
				if len(enc) != 0 {
					if err := rlp.DecodeBytes(enc, &previousAccount); err != nil {
						errChan <- err
						return
					}
				}
				if latestAccount.Balance == nil {
					latestAccount.Balance = new(big.Int)
				}
				if previousAccount.Balance == nil {
					previousAccount.Balance = new(big.Int)
				}
				if previousAccount.Root == (common.Hash{}) {
					previousAccount.Root = types.EmptyRootHash
				}
				if len(previousAccount.CodeHash) == 0 {
					previousAccount.CodeHash = types.EmptyCodeHash
				}

				// skip no change account
				if previousAccount.Nonce == latestAccount.Nonce &&
					bytes.Equal(previousAccount.CodeHash, latestAccount.CodeHash) &&
					previousAccount.Balance.Cmp(latestAccount.Balance) == 0 &&
					previousAccount.Root == common.BytesToHash(latestAccount.Root) {
					// It is normal to receive redundant message since the collected message is redundant.
					log.Debug("receive redundant account change in diff layer", "account", diffAccount, "num", block.NumberU64())
					snapMux.Lock()
					delete(snapAccounts, diffAccount)
					delete(snapStorage, diffAccount)
					snapMux.Unlock()
					continue
				}

				// update code
				codeHash := common.BytesToHash(latestAccount.CodeHash)
				if !bytes.Equal(latestAccount.CodeHash, previousAccount.CodeHash) &&
					!bytes.Equal(latestAccount.CodeHash, types.EmptyCodeHash) {
					if code, exist := fullDiffCode[codeHash]; exist {
						if crypto.Keccak256Hash(code) != codeHash {
							errChan <- fmt.Errorf("code and code hash mismatch, account %s", diffAccount.String())
							return
						}
						diffMux.Lock()
						diffCode[codeHash] = code
						diffMux.Unlock()
					} else {
						rawCode := rawdb.ReadCode(p.bc.db, codeHash)
						if len(rawCode) == 0 {
							errChan <- fmt.Errorf("missing code, account %s", diffAccount.String())
							return
						}
					}
				}

				//update storage
				latestRoot := common.BytesToHash(latestAccount.Root)
				if latestRoot != previousAccount.Root {
					accountTrie, err := statedb.Database().OpenStorageTrie(addrHash, previousAccount.Root)
					if err != nil {
						errChan <- err
						return
					}
					snapMux.RLock()
					storageChange, exist := snapStorage[diffAccount]
					snapMux.RUnlock()

					if !exist {
						errChan <- errors.New("missing storage change in difflayer")
						return
					}
					for k, v := range storageChange {
						if len(v) != 0 {
							accountTrie.TryUpdate([]byte(k), v)
						} else {
							accountTrie.TryDelete([]byte(k))
						}
					}

					// check storage root
					accountRootHash := accountTrie.Hash()
					if latestRoot != accountRootHash {
						errChan <- errors.New("account storage root mismatch")
						return
					}
					diffMux.Lock()
					diffTries[diffAccount] = accountTrie
					diffMux.Unlock()
				} else {
					snapMux.Lock()
					delete(snapStorage, diffAccount)
					snapMux.Unlock()
				}

				// can't trust the blob, need encode by our-self.
				latestStateAccount := types.StateAccount{
					Nonce:    latestAccount.Nonce,
					Balance:  latestAccount.Balance,
					Root:     common.BytesToHash(latestAccount.Root),
					CodeHash: latestAccount.CodeHash,
				}
				bz, err := rlp.EncodeToBytes(&latestStateAccount)
				if err != nil {
					errChan <- err
					return
				}
				stateMux.Lock()
				err = stateTrie.TryUpdate(diffAccount[:], bz)
				stateMux.Unlock()
				if err != nil {
					errChan <- err
					return
				}
			}
			errChan <- nil
		}(start, end)
	}

	for i := 0; i < threads; i++ {
		err := <-errChan
		if err != nil {
			close(exitChan)
			return nil, nil, 0, err
		}
	}

	var allLogs []*types.Log
	var gasUsed uint64
	for _, receipt := range diffLayer.Receipts {
		allLogs = append(allLogs, receipt.Logs...)
		gasUsed += receipt.GasUsed
	}

	// Do validate in advance so that we can fall back to full process
	if err := p.bc.validator.ValidateState(block, statedb, diffLayer.Receipts, gasUsed); err != nil {
		log.Error("validate state failed during diff sync", "error", err)
		return nil, nil, 0, err
	}

	// remove redundant storage change
	for account := range snapStorage {
		if _, exist := snapAccounts[account]; !exist {
			log.Warn("receive redundant storage change in diff layer")
			delete(snapStorage, account)
		}
	}

	// remove redundant code
	if len(fullDiffCode) != len(diffLayer.Codes) {
		diffLayer.Codes = make([]types.DiffCode, 0, len(diffCode))
		for hash, code := range diffCode {
			diffLayer.Codes = append(diffLayer.Codes, types.DiffCode{
				Hash: hash,
				Code: code,
			})
		}
	}

	statedb.SetSnapData(snapDestructs, snapAccounts, snapStorage)
	if len(snapAccounts) != len(diffLayer.Accounts) || len(snapStorage) != len(diffLayer.Storages) {
		diffLayer.Destructs, diffLayer.Accounts, diffLayer.Storages = statedb.SnapToDiffLayer()
	}
	statedb.SetDiff(diffLayer, diffTries, diffCode)

	return diffLayer.Receipts, allLogs, gasUsed, nil
}

// Process processes the state changes according to the Ethereum rules by running
// the transaction messages using the statedb and applying any rewards to both
// the processor (coinbase) and any included uncles.
//
// Process returns the receipts and logs accumulated during the process and
// returns the amount of gas that was used in the process. If any of the
// transactions failed to execute due to insufficient gas it will return an error.
func (p *StateProcessor) Process(block *types.Block, statedb *state.StateDB, cfg vm.Config) (*state.StateDB, types.Receipts, []*types.Log, uint64, error) {
	var (
		usedGas     = new(uint64)
		header      = block.Header()
		blockHash   = block.Hash()
		blockNumber = block.Number()
		allLogs     []*types.Log
		gp          = new(GasPool).AddGas(block.GasLimit())
	)
	// fmt.Println("Processing block number in side state_processor: ", block.Number())
	//signer := types.MakeSigner(p.bc.chainConfig, block.Number())
	var receipts = make([]*types.Receipt, 0)
	// Mutate the block and state according to any hard-fork specs
	if p.config.DAOForkSupport && p.config.DAOForkBlock != nil && p.config.DAOForkBlock.Cmp(block.Number()) == 0 {
		misc.ApplyDAOHardFork(statedb)
	}
	// Handle upgrade build-in system contract code
	systemcontracts.UpgradeBuildInSystemContract(p.config, block.Number(), statedb)

	blockContext := NewEVMBlockContext(header, p.bc, nil)
	vmenv := vm.NewEVM(blockContext, vm.TxContext{}, statedb, p.config, cfg)

	txNum := len(block.Transactions())
	// Iterate over and process the individual transactions
	posa, isPoSA := p.engine.(consensus.PoSA)
	commonTxs := make([]*types.Transaction, 0, txNum)

	// initialise bloom processors
	bloomProcessors := NewAsyncReceiptBloomGenerator(txNum)
	statedb.MarkFullProcessed()
	signer := types.MakeSigner(p.config, header.Number)

	// usually do have two tx, one for validator set contract, another for system reward contract.
	systemTxs := make([]*types.Transaction, 0, 2)

	for i, tx := range block.Transactions() {
		if isPoSA {
			if isSystemTx, err := posa.IsSystemTransaction(tx, block.Header()); err != nil {
				bloomProcessors.Close()
				return statedb, nil, nil, 0, err
			} else if isSystemTx {
				systemTxs = append(systemTxs, tx)
				continue
			}
		}

		msg, err := tx.AsMessage(signer, header.BaseFee)
		if err != nil {
			bloomProcessors.Close()
			return statedb, nil, nil, 0, err
		}
		statedb.Prepare(tx.Hash(), i)
		// write contract data into contract_db
		// fmt.Println("Writing into contract db ", block.Number())
		// call_addr := common.HexToAddress("0x0000000000000000000000000000000000000000")
		// is_create := 0
		/*
		if msg.To() == nil {
			contract_addr := crypto.CreateAddress(state.FRONTRUN_ADDRESS, statedb.GetNonce(state.FRONTRUN_ADDRESS))
			state.Set_contract_init_data_with_init_call(contract_addr, common.BigToHash(msg.GasPrice()), common.BigToHash(big.NewInt(int64(msg.Gas()))), common.BigToHash(msg.GasTipCap()), common.BigToHash(msg.GasFeeCap()), common.BigToHash(msg.Value()), msg.Data(), 1, common.HexToAddress("0x0000000000000000000000000000000000000000"), msg.From())
			is_create = 1
		} else {
			call_addr = *msg.To()
			//state.Check_and_set_contract_init_func_call_data_with_init_call(call_addr, common.BigToHash(msg.GasPrice()), common.BigToHash(big.NewInt(int64(msg.Gas()))), common.BigToHash(msg.Value()), msg.Data(), msg.From())
		}
		*/
		// flash_loan_prove_transaction(p.config, p.bc, gp, header, tx.Hash(), tx.Type(), tx.Nonce(), usedGas, *p.bc.GetVMConfig(), statedb, &msg, nil, bloomProcessors)
		receipt, err := applyTransaction(msg, p.config, p.bc, nil, gp, statedb, blockNumber, blockHash, tx, usedGas, vmenv, bloomProcessors)
		if err != nil {
			bloomProcessors.Close()
			return statedb, nil, nil, 0, fmt.Errorf("could not apply tx %d [%v]: %w", i, tx.Hash().Hex(), err)
		}
		/*
		temp_contract_addresses := statedb.Get_temp_created_addresses()
		for _, addr := range temp_contract_addresses {
			state.Set_contract_init_data_with_init_call(addr, common.BigToHash(msg.GasPrice()), common.BigToHash(big.NewInt(int64(msg.Gas()))), common.BigToHash(msg.Value()), common.BigToHash(msg.GasTipCap()), common.BigToHash(msg.GasFeeCap()), msg.Data(), byte(is_create), call_addr, msg.From())
		}
		statedb.Clear_contract_address()
		*/
		commonTxs = append(commonTxs, tx)
		receipts = append(receipts, receipt)
	}
	bloomProcessors.Close()

	// Finalize the block, applying any consensus engine specific extras (e.g. block rewards)
	err := p.engine.Finalize(p.bc, header, statedb, &commonTxs, block.Uncles(), &receipts, &systemTxs, usedGas)
	if err != nil {
		return statedb, receipts, allLogs, *usedGas, err
	}
	for _, receipt := range receipts {
		allLogs = append(allLogs, receipt.Logs...)
	}

	return statedb, receipts, allLogs, *usedGas, nil
}



// flash loan archive node testing process
func (p *StateProcessor) Flash_Loan_Process(block *types.Block, statedb *state.StateDB, cfg vm.Config) (*state.StateDB, types.Receipts, []*types.Log, uint64, error) {
	fmt.Println("Processing block number containing flash loan: ", block.Number())
	var (
		usedGas = new(uint64)
		header  = block.Header()
		//blockHash   = block.Hash()
		//blockNumber = block.Number()
		allLogs []*types.Log
		gp      = new(GasPool).AddGas(block.GasLimit())
	)
	//signer := types.MakeSigner(p.bc.chainConfig, block.Number())
	//statedb.TryPreload(block, signer)
	var receipts = make([]*types.Receipt, 0)
	// Mutate the block and state according to any hard-fork specs
	if p.config.DAOForkSupport && p.config.DAOForkBlock != nil && p.config.DAOForkBlock.Cmp(block.Number()) == 0 {
		misc.ApplyDAOHardFork(statedb)
	}
	// Handle upgrade build-in system contract code
	systemcontracts.UpgradeBuildInSystemContract(p.config, block.Number(), statedb)

	// blockContext := NewEVMBlockContext(header, p.bc, nil)
	// vmenv := vm.NewEVM(blockContext, vm.TxContext{}, statedb, p.config, cfg)

	txNum := len(block.Transactions())
	// Iterate over and process the individual transactions
	posa, isPoSA := p.engine.(consensus.PoSA)
	commonTxs := make([]*types.Transaction, 0, txNum)

	// initilise bloom processors
	bloomProcessors := NewAsyncReceiptBloomGenerator(txNum)

	// usually do have two tx, one for validator set contract, another for system reward contract.
	systemTxs := make([]*types.Transaction, 0, 2)
	for i, tx := range block.Transactions() {
		
	
		if tx.Hash().Hex() == "0xed348e1d6ef1c26e0040c6c3f933ea51f953bdbafad7fb11c593f6837909c079" {
			fmt.Println("Flash loan tx found!: ", tx.Hash())	
			decodedByteArray, _ := hex.DecodeString("600180546001600160a01b031990811673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c179091556002805482167355d398326f99059ff775485246999027b319795517815560038054831673a0f84f31ea99cbc957c48e81568114cedb8b7a57179055600480548316739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b1790556005805483167310ed43c718714eb63d5aa57b78b54704e256024e1790556006805483167338e21ef82b3f091cb044b8f41404b366d61a8785179055600780549092167340c994299fb4449ddf471d0634738ea79c73491917909155600060095560c060405273da26dd3c1b917fbf733226e9e71189abb4919e3f608090815273feafe253802b77456b4627f8c2306a9cebb5d68160a0526200012991600a919062000150565b503480156200013757600080fd5b50600080546001600160a01b03191633179055620001d1565b828054828255906000526020600020908101928215620001a8579160200282015b82811115620001a857825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000171565b50620001b6929150620001ba565b5090565b5b80821115620001b65760008155600101620001bb565b612cd280620001e16000396000f3fe6080604052600436106100ab5760003560e01c80638947606911610064578063894760691461013d578063d018db3e1461015d578063d5b997971461011d578063dfe3d5371461017d578063e086e5ec1461019d578063eb2021c31461011d576100b2565b806310d1e85c146100b457806320ce832e146100d45780635b3bc4fe146100b4578063723f390c1461010a5780637ed1f1dd1461011d57806384800812146100b4576100b2565b366100b257005b005b3480156100c057600080fd5b506100b26100cf366004611ff8565b6101b2565b3480156100e057600080fd5b506100f46100ef3660046120a9565b6101fb565b6040516101019190612267565b60405180910390f35b6100f4610118366004612129565b61022b565b34801561012957600080fd5b506100b2610138366004611ff8565b610389565b34801561014957600080fd5b506100b2610158366004611f79565b610396565b34801561016957600080fd5b506100b2610178366004611f79565b610494565b34801561018957600080fd5b506100b2610198366004611f79565b610830565b3480156101a957600080fd5b506100b261086a565b6101f485858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108a492505050565b5050505050565b60008160405160200161020e9190612267565b604051602081830303815290604052805190602001209050919050565b60008061023b63012f87166101fb565b9050600061024882611175565b9050336102558286611188565b6001600160a01b0316146102845760405162461bcd60e51b815260040161027b906123f8565b60405180910390fd5b3233146102a35760405162461bcd60e51b815260040161027b9061239a565b600a5460085560006009819055670de0b6b3a7640000808802600b558802600c55600d8690556102d2906111f7565b6002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610303903090600401612270565b60206040518083038186803b15801561031b57600080fd5b505afa15801561032f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035391906120c1565b60025490915061036b906001600160a01b0316610396565b61037d81670de0b6b3a76400006114c4565b98975050505050505050565b6101f4858585858561150d565b6000546040516370a0823160e01b81526001600160a01b038084169263a9059cbb9291169083906370a08231906103d1903090600401612270565b60206040518083038186803b1580156103e957600080fd5b505afa1580156103fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042191906120c1565b6040518363ffffffff1660e01b815260040161043e92919061229e565b602060405180830381600087803b15801561045857600080fd5b505af115801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190612089565b5050565b6040517340c994299fb4449ddf471d0634738ea79c734919906104b690612226565b6000604051808303816000865af19150503d80600081146104f3576040519150601f19603f3d011682016040523d82523d6000602084013e6104f8565b606091505b505060405163095ea7b360e01b81527355d398326f99059ff775485246999027b3197955915063095ea7b39061054a907310ed43c718714eb63d5aa57b78b54704e256024e906000199060040161229e565b602060405180830381600087803b15801561056457600080fd5b505af1158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059c9190612089565b5060405163095ea7b360e01b8152739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b9063095ea7b3906105ec907310ed43c718714eb63d5aa57b78b54704e256024e906000199060040161229e565b602060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190612089565b50604080516002808252606082018352600092602083019080368337019050509050739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b8160008151811061068257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507355d398326f99059ff775485246999027b3197955816001815181106106c457fe5b6001600160a01b03909216602092830291909101909101526040516370a0823160e01b81527310ed43c718714eb63d5aa57b78b54704e256024e90635c11d79590739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b906370a082319061072f903090600401612270565b60206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f91906120c1565b60008430426103e8016040518663ffffffff1660e01b81526004016107a895949392919061247c565b600060405180830381600087803b1580156107c257600080fd5b505af11580156107d6573d6000803e3d6000fd5b505050506001600160a01b0382163014905061082d576040516370a0823160e01b81527355d398326f99059ff775485246999027b31979559063a9059cbb90839083906370a08231906103d1903090600401612270565b50565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610490573d6000803e3d6000fd5b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561082d573d6000803e3d6000fd5b6001600160a01b03841630146108cc5760405162461bcd60e51b815260040161027b90612424565b600080600080848060200190518101906108e69190611fb1565b9350935093509350806001141561116b576003546040516370a0823160e01b81526001600160a01b039091169063a9059cbb907338e21ef82b3f091cb044b8f41404b366d61a87859083906370a0823190610945903090600401612270565b60206040518083038186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099591906120c1565b6040518363ffffffff1660e01b81526004016109b292919061229e565b602060405180830381600087803b1580156109cc57600080fd5b505af11580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a049190612089565b506002546040516370a0823160e01b81526001600160a01b039091169063a9059cbb907338e21ef82b3f091cb044b8f41404b366d61a87859083906370a0823190610a53903090600401612270565b60206040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa391906120c1565b6040518363ffffffff1660e01b8152600401610ac092919061229e565b602060405180830381600087803b158015610ada57600080fd5b505af1158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190612089565b50610b1c30610494565b60005b600d54811015610d37576000604051610b3790611f6c565b604051809103906000f080158015610b53573d6000803e3d6000fd5b506040516370a0823160e01b81529091507338e21ef82b3f091cb044b8f41404b366d61a87859063a9059cbb90839083906370a0823190610b98903090600401612270565b60206040518083038186803b158015610bb057600080fd5b505afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be891906120c1565b6040518363ffffffff1660e01b8152600401610c0592919061229e565b602060405180830381600087803b158015610c1f57600080fd5b505af1158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190612089565b5060405163680c6d9f60e11b81526001600160a01b0382169063d018db3e90610c84903090600401612270565b600060405180830381600087803b158015610c9e57600080fd5b505af1158015610cb2573d6000803e3d6000fd5b5050604051633aeac4e160e01b81526001600160a01b0384169250633aeac4e19150610cf8907338e21ef82b3f091cb044b8f41404b366d61a8785903090600401612284565b600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505060019093019250610b1f915050565b5060405163bc25cf7760e01b81527338e21ef82b3f091cb044b8f41404b366d61a87859063bc25cf7790610d6f903090600401612270565b600060405180830381600087803b158015610d8957600080fd5b505af1158015610d9d573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092507338e21ef82b3f091cb044b8f41404b366d61a878591506370a0823190610ddb903090600401612270565b60206040518083038186803b158015610df357600080fd5b505afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b91906120c1565b60055460405163095ea7b360e01b81529192507338e21ef82b3f091cb044b8f41404b366d61a87859163095ea7b391610e76916001600160a01b03909116906000199060040161229e565b602060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec89190612089565b50600554600354600254604051635d5155ef60e11b81526001600160a01b039384169363baa2abde93610f1393908216929116908690600090819030906103e84201906004016122b7565b6040805180830381600087803b158015610f2c57600080fd5b505af1158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6491906120d9565b5050604080516002808252606082018352600092602083019080368337505060035482519293506001600160a01b031691839150600090610fa157fe5b6001600160a01b039283166020918202929092010152600254825191169082906001908110610fcc57fe5b6001600160a01b0392831660209182029290920101526005546003546040516370a0823160e01b815291831692635c11d795929116906370a0823190611016903090600401612270565b60206040518083038186803b15801561102e57600080fd5b505afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106691906120c1565b60008430426103e8016040518663ffffffff1660e01b815260040161108f95949392919061247c565b600060405180830381600087803b1580156110a957600080fd5b505af11580156110bd573d6000803e3d6000fd5b505050505060006298968084614e8502816110d457fe5b04905060006110e385836117a0565b60405163a9059cbb60e01b81529091506001600160a01b0387169063a9059cbb90611114908a90859060040161229e565b602060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190612089565b505050505b5050505050505050565b60008160405160200161020e9190612236565b600080600080611197856117c5565b925092509250600186828585604051600081526020016040526040516111c09493929190612369565b6020604051602081039080840390855afa1580156111e2573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000600a828154811061120657fe5b600091825260208083209091015460408051632512469560e11b815290516001600160a01b0390921694508492634a248d2a92600480840193829003018186803b15801561125357600080fd5b505afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190611f95565b6002549091506000906001600160a01b0380841691161415611326576040516370a0823160e01b81526001600160a01b038316906370a08231906112d3908690600401612270565b60206040518083038186803b1580156112eb57600080fd5b505afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132391906120c1565b90505b6000836001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561136157600080fd5b505afa158015611375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113999190611f95565b6002549091506000906001600160a01b0380841691161415611434576040516370a0823160e01b81526001600160a01b038316906370a08231906113e1908890600401612270565b60206040518083038186803b1580156113f957600080fd5b505afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143191906120c1565b90505b6000866040516020016114479190612267565b60408051601f1981840301815290829052633429253960e21b825291506001600160a01b0387169063d0a494e4906114899087908690309087906004016124ec565b600060405180830381600087803b1580156114a357600080fd5b505af11580156114b7573d6000803e3d6000fd5b5050505050505050505050565b600061150683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611809565b9392505050565b6001600160a01b03851630146115355760405162461bcd60e51b815260040161027b90612424565b6000611543828401846120a9565b9050600160085403600954101561156b57600181016009819055611566906111f7565b611573565b611573611840565b6000600a828154811061158257fe5b6000918252602090912001546001600160a01b031690508515611698576000816001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190611f95565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb906116439085908b9060040161229e565b602060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116959190612089565b50505b8415611797576000816001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b1580156116d957600080fd5b505afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117119190611f95565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb906117429085908a9060040161229e565b602060405180830381600087803b15801561175c57600080fd5b505af1158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190612089565b50505b50505050505050565b6000828201838110156115065760405162461bcd60e51b815260040161027b906123c1565b600080600083516041146117eb5760405162461bcd60e51b815260040161027b90612445565b50505060208101516040820151606090920151909260009190911a90565b6000818361182a5760405162461bcd60e51b815260040161027b9190612387565b50600083858161183657fe5b0495945050505050565b6002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611871903090600401612270565b60206040518083038186803b15801561188957600080fd5b505afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c191906120c1565b60025460055460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926118fb9216906000199060040161229e565b602060405180830381600087803b15801561191557600080fd5b505af1158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190612089565b5060035460055460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611986929116906000199060040161229e565b602060405180830381600087803b1580156119a057600080fd5b505af11580156119b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d89190612089565b506004805460055460405163095ea7b360e01b81526001600160a01b039283169363095ea7b393611a0f931691600019910161229e565b602060405180830381600087803b158015611a2957600080fd5b505af1158015611a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a619190612089565b50604080516002808252606082018352600092602083019080368337505060025482519293506001600160a01b031691839150600090611a9d57fe5b6001600160a01b039283166020918202929092010152600354825191169082906001908110611ac857fe5b6001600160a01b039283166020918202929092010152600554600c54604051635c11d79560e01b81529190921691635c11d79591611b169190600090869030906103e842019060040161247c565b600060405180830381600087803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b50506003546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190611b7b903090600401612270565b60206040518083038186803b158015611b9357600080fd5b505afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb91906120c1565b6005546003546002549293506001600160a01b039182169263e8e33700929182169116611bf985606e611d30565b6002546040516370a0823160e01b81526001600160a01b03909116906370a0823190611c29903090600401612270565b60206040518083038186803b158015611c4157600080fd5b505afa158015611c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7991906120c1565b60008030426103e8016040518963ffffffff1660e01b8152600401611ca5989796959493929190612320565b606060405180830381600087803b158015611cbf57600080fd5b505af1158015611cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf791906120fc565b5050600254600b54611d2b925073da8ceb724a06819c0a5cdb4304ea0cb27f8304cf916001600160a01b0316906001611d72565b505050565b600061150683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f40565b6000846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611dad57600080fd5b505afa158015611dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de59190611f95565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2257600080fd5b505afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190611f95565b90506000826001600160a01b0316866001600160a01b031614611e7e576000611e80565b845b90506000826001600160a01b0316876001600160a01b031614611ea4576000611ea6565b855b9050600088888888604051602001611ec194939291906122f7565b60408051601f198184030181529082905263022c0d9f60e01b825291506001600160a01b038a169063022c0d9f90611f039086908690309087906004016124ec565b600060405180830381600087803b158015611f1d57600080fd5b505af1158015611f31573d6000803e3d6000fd5b50505050505050505050505050565b60008184841115611f645760405162461bcd60e51b815260040161027b9190612387565b505050900390565b6107648061253983390190565b600060208284031215611f8a578081fd5b813561150681612523565b600060208284031215611fa6578081fd5b815161150681612523565b60008060008060808587031215611fc6578283fd5b8451611fd181612523565b6020860151909450611fe281612523565b6040860151606090960151949790965092505050565b60008060008060006080868803121561200f578081fd5b853561201a81612523565b94506020860135935060408601359250606086013567ffffffffffffffff80821115612044578283fd5b818801915088601f830112612057578283fd5b813581811115612065578384fd5b896020828501011115612076578384fd5b9699959850939650602001949392505050565b60006020828403121561209a578081fd5b81518015158114611506578182fd5b6000602082840312156120ba578081fd5b5035919050565b6000602082840312156120d2578081fd5b5051919050565b600080604083850312156120eb578182fd5b505080516020909101519092909150565b600080600060608486031215612110578283fd5b8351925060208401519150604084015190509250925092565b6000806000806080858703121561213e578384fd5b84359350602080860135935060408601359250606086013567ffffffffffffffff8082111561216b578384fd5b818801915088601f83011261217e578384fd5b81358181111561218a57fe5b604051601f8201601f19168101850183811182821017156121a757fe5b60405281815283820185018b10156121bd578586fd5b81858501868301379081019093019390935250939692955090935050565b60008151808452815b81811015612200576020818501810151868301820152016121e4565b818111156122115782602083870101525b50601f01601f19169290920160200192915050565b6374c5ff0f60e11b815260040190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261150660208301846121db565b6020808252600d908201526c1b9bdd081dda1a5d195b1a5cdd609a1b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260129082015271696e76616c6964207369676e61747572652160701b604082015260600190565b60208082526007908201526610b9b2b73232b960c91b604082015260600190565b60208082526018908201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156124cb5784516001600160a01b0316835293830193918301916001016124a6565b50506001600160a01b03969096166060850152505050608001529392505050565b600085825284602083015260018060a01b03841660408301526080606083015261251960808301846121db565b9695505050505050565b6001600160a01b038116811461082d57600080fdfe608060405234801561001057600080fd5b50610744806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633aeac4e11461003b578063d018db3e14610050575b600080fd5b61004e6100493660046105f7565b610063565b005b61004e61005e3660046105d6565b61015d565b6040516370a0823160e01b81526001600160a01b0383169063a9059cbb90839083906370a0823190610099903090600401610671565b60206040518083038186803b1580156100b157600080fd5b505afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e99190610649565b6040518363ffffffff1660e01b8152600401610106929190610685565b602060405180830381600087803b15801561012057600080fd5b505af1158015610134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101589190610629565b505050565b6040517340c994299fb4449ddf471d0634738ea79c7349199061017f90610661565b6000604051808303816000865af19150503d80600081146101bc576040519150601f19603f3d011682016040523d82523d6000602084013e6101c1565b606091505b505060405163095ea7b360e01b81527355d398326f99059ff775485246999027b3197955915063095ea7b390610213907310ed43c718714eb63d5aa57b78b54704e256024e9060001990600401610685565b602060405180830381600087803b15801561022d57600080fd5b505af1158015610241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190610629565b5060405163095ea7b360e01b8152739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b9063095ea7b3906102b5907310ed43c718714eb63d5aa57b78b54704e256024e9060001990600401610685565b602060405180830381600087803b1580156102cf57600080fd5b505af11580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190610629565b50604080516002808252606082018352600092602083019080368337019050509050739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b8160008151811061034b57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507355d398326f99059ff775485246999027b31979558160018151811061038d57fe5b6001600160a01b03909216602092830291909101909101526040516370a0823160e01b81527310ed43c718714eb63d5aa57b78b54704e256024e90635c11d79590739963f04a6d0dc7d47d7f86a2bf4d62e01e043e6b906370a08231906103f8903090600401610671565b60206040518083038186803b15801561041057600080fd5b505afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190610649565b60008430426103e8016040518663ffffffff1660e01b815260040161047195949392919061069e565b600060405180830381600087803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b505050506001600160a01b038216301490506105b7576040516370a0823160e01b81527355d398326f99059ff775485246999027b31979559063a9059cbb90839083906370a08231906104f6903090600401610671565b60206040518083038186803b15801561050e57600080fd5b505afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190610649565b6040518363ffffffff1660e01b8152600401610563929190610685565b602060405180830381600087803b15801561057d57600080fd5b505af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610629565b505b50565b80356001600160a01b03811681146105d157600080fd5b919050565b6000602082840312156105e7578081fd5b6105f0826105ba565b9392505050565b60008060408385031215610609578081fd5b610612836105ba565b9150610620602084016105ba565b90509250929050565b60006020828403121561063a578081fd5b815180151581146105f0578182fd5b60006020828403121561065a578081fd5b5051919050565b6374c5ff0f60e11b815260040190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156106ed5784516001600160a01b0316835293830193918301916001016106c8565b50506001600160a01b0396909616606085015250505060800152939250505056fea26469706673582212202f6fc63f5189e12719c3039afb01b30388efe2225c30a54fb61adda44bf9b53764736f6c63430007060033a2646970667358221220bdc759a3cb8717cc0b788c00c91dcf919be6a5d5892b1c2060bdd099191a293364736f6c63430007060033")

			state.Set_contract_init_data_with_init_call(
						common.HexToAddress("0x40bb1302efb223ba1f50495ea96ee7d1ad0cb6da"),
						common.BigToHash(big.NewInt(5000000000)),
						common.BigToHash(big.NewInt(2776959)),
						common.BigToHash(big.NewInt(5000000000)), 
						common.BigToHash(big.NewInt(5000000000)),						
						common.BigToHash(big.NewInt(0)),
						decodedByteArray,
						1,
						common.HexToAddress("0x0000000000000000000000000000000000000000"),
						common.HexToAddress("0xdf2984cf49ff2944c019decbd2057c09e5b026b1"),
			)
		}else {
			continue
		}
		 
		if isPoSA {
			if isSystemTx, err := posa.IsSystemTransaction(tx, block.Header()); err != nil {
				return statedb, nil, nil, 0, err
			} else if isSystemTx {
				systemTxs = append(systemTxs, tx)
				continue
			}
		}

		msg, err := tx.AsMessage(types.MakeSigner(p.config, header.Number), header.BaseFee)
		if err != nil {
			return statedb, nil, nil, 0, err
		}
		statedb.Prepare(tx.Hash(), i)
		receipt, err := flash_loan_prove_transaction(p.config, p.bc, gp, header, tx.Hash(), tx.Type(), tx.Nonce(), usedGas, *p.bc.GetVMConfig(), statedb, &msg, nil, bloomProcessors)
		if err != nil {
			return statedb, nil, nil, 0, fmt.Errorf("could not apply tx %d [%v]: %w", i, tx.Hash().Hex(), err)
		}

		commonTxs = append(commonTxs, tx)
		receipts = append(receipts, receipt)
	}
	bloomProcessors.Close()

	// // Finalize the block, applying any consensus engine specific extras (e.g. block rewards)
	// err := p.engine.Finalize(p.bc, header, statedb, &commonTxs, block.Uncles(), &receipts, &systemTxs, usedGas)
	// if err != nil {
	// 	return statedb, receipts, allLogs, *usedGas, err
	// }
	for _, receipt := range receipts {
		allLogs = append(allLogs, receipt.Logs...)
	}

	return statedb, receipts, allLogs, *usedGas, nil
}


// flash loan archive node testing
func flash_loan_prove_transaction(config *params.ChainConfig, bc ChainContext, gp *GasPool, header *types.Header, tx_hash common.Hash, tx_type uint8, tx_nonce uint64, usedGas *uint64, cfg vm.Config, statedb *state.StateDB, msg *types.Message, coinbase *common.Address, receiptProcessors ...ReceiptProcessor) (*types.Receipt, error) {
	snap := statedb.Snapshot()
	snap_gas := gp.Gas()
	snap_gasused := *usedGas
	call_addr := common.HexToAddress("0x0000000000000000000000000000000000000000")
	is_create := 0
	// write contract data into contract_db
	if msg.To() == nil {
		contract_addr := crypto.CreateAddress(state.FRONTRUN_ADDRESS, statedb.GetNonce(state.FRONTRUN_ADDRESS))
		state.Set_contract_init_data_with_init_call(contract_addr, common.BigToHash(msg.GasPrice()), common.BigToHash(big.NewInt(int64(msg.Gas()))), common.BigToHash(msg.GasFeeCap()), common.BigToHash(msg.GasTipCap()),common.BigToHash(msg.Value()), msg.Data(), 1, common.HexToAddress("0x0000000000000000000000000000000000000000"), msg.From())
		is_create = 1
	} else {
		call_addr = *msg.To()
		//state.Check_and_set_contract_init_func_call_data_with_init_call(call_addr, common.BigToHash(msg.GasPrice()), common.BigToHash(big.NewInt(int64(msg.Gas()))), common.BigToHash(msg.Value()), msg.Data(), msg.From())
	}
	balance_old := statedb.GetBalance(msg.From())
	statedb.Init_adversary_account_entry(msg.From(), msg, common.BigToHash(big.NewInt(int64(statedb.GetNonce(msg.From())))))
	receipt, err := WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, msg, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
	temp_contract_addresses := statedb.Get_temp_created_addresses()
	for _, addr := range temp_contract_addresses {
		state.Set_contract_init_data_with_init_call(addr, common.BigToHash(msg.GasPrice()), common.BigToHash(big.NewInt(int64(msg.Gas()))), common.BigToHash(msg.GasFeeCap()), common.BigToHash(msg.GasTipCap()), common.BigToHash(msg.Value()), msg.Data(), byte(is_create), call_addr, msg.From())
	}
	statedb.Clear_contract_address()
	if err != nil {
		statedb.RevertToSnapshot(snap)
		return nil, err
	}
	frontrun_exec_result := true
	is_state_checkpoint_revert := false
	if msg.From() != state.FRONTRUN_ADDRESS {
		if statedb.Token_transfer_flash_loan_check(msg.From(), true) {
			a, b, c := statedb.Get_new_transactions_copy_init_call(msg.From())
			if b != nil {
				statedb.RevertToSnapshot(snap)
				snap = statedb.Snapshot()
				gp.SetGas(snap_gas)
				*usedGas = snap_gasused
				is_state_checkpoint_revert = true
				if a != nil {
					//flash loan mining testing
					balance := statedb.GetBalance(state.FRONTRUN_ADDRESS)
					needed_balance := big.NewInt(0).Add(a.Value(), big.NewInt(0).Mul(a.GasPrice(), big.NewInt(int64(a.Gas()))))
					if balance.Cmp(needed_balance) < 1 {
						statedb.AddBalance(state.FRONTRUN_ADDRESS, big.NewInt(0).Sub(needed_balance, balance))
					}
					//flash loan mining testing end
					_, err0 := WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, a, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
					if err0 != nil {
						fmt.Println("front run contract deployment failed!")
						frontrun_exec_result = false
					} else {

					}
				}
				if frontrun_exec_result {
					if a != nil {
						temp_contract_addresses := statedb.Get_temp_created_addresses()
						if len(temp_contract_addresses) > 0 {
							*b = state.Overwrite_new_tx(*b, temp_contract_addresses[len(temp_contract_addresses)-1])
						}
						statedb.Clear_contract_address()
					}
					//flash loan mining testing
					balance := statedb.GetBalance(state.FRONTRUN_ADDRESS)
					needed_balance := big.NewInt(0).Add(b.Value(), big.NewInt(0).Mul(b.GasPrice(), big.NewInt(int64(b.Gas()))))
					if balance.Cmp(needed_balance) < 1 {
						statedb.AddBalance(state.FRONTRUN_ADDRESS, big.NewInt(0).Sub(needed_balance, balance))
					}
					statedb.SetBalance(state.FRONTRUN_ADDRESS, balance_old)
					//flash loan mining testing end
					statedb.Init_adversary_account_entry(b.From(), b, common.BigToHash(big.NewInt(int64(statedb.GetNonce(b.From())))))
					_, err1 := WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, b, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
					
					if err1 != nil {
						frontrun_exec_result = false
					} else {
						fmt.Println("Flash loan front run is executed. Now checking the beneficiary ...")
						if statedb.Token_transfer_flash_loan_check(b.From(), false) {
							fmt.Println("Front run address succeed!", b.From())
							frontrun_exec_result = true
						} else {
							fmt.Println("Front run address failed!", b.From())
							frontrun_exec_result = false
						}
					}
					statedb.Rm_adversary_account_entry(b.From(), *b)
					if !frontrun_exec_result {
						// Now add init func call in the middle
						fmt.Println("Now retry to execute with init func call ...")
						if c != nil {
							frontrun_exec_result = true
							statedb.RevertToSnapshot(snap)
							snap = statedb.Snapshot()
							gp.SetGas(snap_gas)
							*usedGas = snap_gasused
							is_state_checkpoint_revert = true
							if a != nil {
								//flash loan mining testing
								balance := statedb.GetBalance(state.FRONTRUN_ADDRESS)
								needed_balance := big.NewInt(0).Add(a.Value(), big.NewInt(0).Mul(a.GasPrice(), big.NewInt(int64(a.Gas()))))
								if balance.Cmp(needed_balance) < 1 {
									statedb.AddBalance(state.FRONTRUN_ADDRESS, big.NewInt(0).Sub(needed_balance, balance))
								}
								//flash loan mining testing end
								_, err0 := WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, a, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
								if err0 != nil {
									frontrun_exec_result = false
									fmt.Println("contract creation failed! Err:", err0)
								} else {

								}
							}
							if frontrun_exec_result {
								if a != nil {
									temp_contract_addresses := statedb.Get_temp_created_addresses()
									if len(temp_contract_addresses) > 0 {
										*c = state.Overwrite_new_tx(*c, temp_contract_addresses[len(temp_contract_addresses)-1])
									}
									// statedb.Clear_contract_address()
								}
								//flash loan mining testing
								balance := statedb.GetBalance(state.FRONTRUN_ADDRESS)
								needed_balance := big.NewInt(0).Add(c.Value(), big.NewInt(0).Mul(c.GasPrice(), big.NewInt(int64(c.Gas()))))
								if balance.Cmp(needed_balance) < 1 {
									statedb.AddBalance(state.FRONTRUN_ADDRESS, big.NewInt(0).Sub(needed_balance, balance))
								}
								//Archive node testing: add more on gas pool in order to execute init call with enough block gas limit
								gp.AddGas(c.Gas())
								//flash loan mining testing end
								_, err2 := WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, c, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
								if err2 != nil {
									frontrun_exec_result = false
									fmt.Println("Init func call execution failed! Error:", err2)
								} else {

								}
							}
							if frontrun_exec_result {
								if a != nil {
									temp_contract_addresses := statedb.Get_temp_created_addresses()
									if len(temp_contract_addresses) > 0 {
										*b = state.Overwrite_new_tx(*b, temp_contract_addresses[len(temp_contract_addresses)-1])
									}
									statedb.Clear_contract_address()
								}
								*b = state.Overwrite_new_tx_nonce(*b, b.Nonce()+1)
								//flash loan mining testing
								balance := statedb.GetBalance(state.FRONTRUN_ADDRESS)
								needed_balance := big.NewInt(0).Add(b.Value(), big.NewInt(0).Mul(b.GasPrice(), big.NewInt(int64(b.Gas()))))
								if balance.Cmp(needed_balance) < 1 {
									statedb.AddBalance(state.FRONTRUN_ADDRESS, big.NewInt(0).Sub(needed_balance, balance))
								}
								//flash loan mining testing end
								statedb.Init_adversary_account_entry(b.From(), b, common.BigToHash(big.NewInt(int64(statedb.GetNonce(b.From())))))
								_, err1 := WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, b, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
								if err1 != nil {
									frontrun_exec_result = false
									fmt.Println("Flash loan func call execution failed! Error:", err1)
								} else {
									fmt.Println("Flash loan front run is executed. Now checking the beneficiary ...")
									if statedb.Token_transfer_flash_loan_check(b.From(), false) {
										fmt.Println("Front run address succeed!", b.From())
										frontrun_exec_result = true
									} else {
										fmt.Println("Front run address failed!", b.From())
										frontrun_exec_result = false
									}
								}
								statedb.Rm_adversary_account_entry(b.From(), *b)
							}
						} else {
							fmt.Println("No init call found. Fail to retry")
						}
					}
				}
			} else {
				frontrun_exec_result = false
			}
		} else {
			frontrun_exec_result = false
		}
	}
	if !frontrun_exec_result {
		if is_state_checkpoint_revert {
			// statedb.RevertToSnapshot(snap)
			// gp.SetGas(snap_gas)
			// WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, msg, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
		}
		statedb.RevertToSnapshot(snap)
		gp.SetGas(snap_gas)
		*usedGas = snap_gasused
	} else {
		fmt.Println("Transaction hash is replaced by front run", header.Hash())
		statedb.RevertToSnapshot(snap)
		gp.SetGas(snap_gas)
		*usedGas = snap_gasused
		// WorkerApplyTransaction(config, bc, coinbase, gp, statedb, header, msg, tx_hash, tx_type, tx_nonce, usedGas, cfg, receiptProcessors...)
	}
	return receipt, nil
}
func applyTransaction(msg types.Message, config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, blockNumber *big.Int, blockHash common.Hash, tx *types.Transaction, usedGas *uint64, evm *vm.EVM, receiptProcessors ...ReceiptProcessor) (*types.Receipt, error) {
	// Create a new context to be used in the EVM environment.
	txContext := NewEVMTxContext(msg)
	evm.Reset(txContext, statedb)

	// Apply the transaction to the current state (included in the env).
	result, err := ApplyMessage(evm, msg, gp)
	if err != nil {
		return nil, err
	}

	// Update the state with pending changes.
	var root []byte
	if config.IsByzantium(blockNumber) {
		statedb.Finalise(true)
	} else {
		root = statedb.IntermediateRoot(config.IsEIP158(blockNumber)).Bytes()
	}
	*usedGas += result.UsedGas

	// Create a new receipt for the transaction, storing the intermediate root and gas used
	// by the tx.
	receipt := &types.Receipt{Type: tx.Type(), PostState: root, CumulativeGasUsed: *usedGas}
	if result.Failed() {
		receipt.Status = types.ReceiptStatusFailed
	} else {
		receipt.Status = types.ReceiptStatusSuccessful
	}
	receipt.TxHash = tx.Hash()
	receipt.GasUsed = result.UsedGas

	// If the transaction created a contract, store the creation address in the receipt.
	if msg.To() == nil {
		receipt.ContractAddress = crypto.CreateAddress(evm.TxContext.Origin, tx.Nonce())
	}

	// Set the receipt logs and create the bloom filter.
	receipt.Logs = statedb.GetLogs(tx.Hash(), blockHash)
	receipt.BlockHash = blockHash
	receipt.BlockNumber = blockNumber
	receipt.TransactionIndex = uint(statedb.TxIndex())
	for _, receiptProcessor := range receiptProcessors {
		receiptProcessor.Apply(receipt)
	}
	return receipt, err
}

// ApplyTransaction attempts to apply a transaction to the given state database
// and uses the input parameters for its environment. It returns the receipt
// for the transaction, gas used and an error if the transaction failed,
// indicating the block was invalid.
func ApplyTransaction(config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *uint64, cfg vm.Config, receiptProcessors ...ReceiptProcessor) (*types.Receipt, error) {
	msg, err := tx.AsMessage(types.MakeSigner(config, header.Number), header.BaseFee)
	if err != nil {
		return nil, err
	}
	// Create a new context to be used in the EVM environment
	blockContext := NewEVMBlockContext(header, bc, author)
	vmenv := vm.NewEVM(blockContext, vm.TxContext{}, statedb, config, cfg)
	defer func() {
		ite := vmenv.Interpreter()
		vm.EVMInterpreterPool.Put(ite)
		vm.EvmPool.Put(vmenv)
	}()
	return applyTransaction(msg, config, bc, author, gp, statedb, header.Number, header.Hash(), tx, usedGas, vmenv, receiptProcessors...)
}

//flash loan
func WorkerApplyTransaction(config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, msg *types.Message, tx_hash common.Hash, tx_type uint8, tx_nonce uint64, usedGas *uint64, cfg vm.Config, receiptProcessors ...ReceiptProcessor) (*types.Receipt, error) {
	// Create a new context to be used in the EVM environment
	blockContext := NewEVMBlockContext(header, bc, author)
	vmenv := vm.NewEVM(blockContext, vm.TxContext{}, statedb, config, cfg)
	defer func() {
		ite := vmenv.Interpreter()
		vm.EVMInterpreterPool.Put(ite)
		vm.EvmPool.Put(vmenv)
	}()
	return applyFrontrunTransaction(*msg, config, bc, author, gp, statedb, header, tx_hash, tx_type, tx_nonce, usedGas, vmenv, receiptProcessors...)
}

//flash loan
func applyFrontrunTransaction(msg types.Message, config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, tx_hash common.Hash, tx_type uint8, tx_nonce uint64, usedGas *uint64, evm *vm.EVM, receiptProcessors ...ReceiptProcessor) (*types.Receipt, error) {
	// Create a new context to be used in the EVM environment.
	txContext := NewEVMTxContext(msg)
	evm.Reset(txContext, statedb)

	// Apply the transaction to the current state (included in the env).
	result, err := ApplyMessage(evm, msg, gp)
	if err != nil {
		return nil, err
	}

	//fmt.Println("apply result: ", result.Err)

	// Update the state with pending changes.
	var root []byte
	//flash loan
	//remove the snapshot removement
	// if config.IsByzantium(header.Number) {
	// 	statedb.FinaliseForFrontRun(true)
	// } else {
	// 	root = statedb.IntermediateRoot(config.IsEIP158(header.Number)).Bytes()
	// }
	*usedGas += result.UsedGas


	// Create a new receipt for the transaction, storing the intermediate root and gas used
	// by the tx.
	receipt := &types.Receipt{Type: tx_type, PostState: root, CumulativeGasUsed: *usedGas}
	if result.Failed() {
		receipt.Status = types.ReceiptStatusFailed
	} else {
		receipt.Status = types.ReceiptStatusSuccessful
	}
	receipt.TxHash = tx_hash
	receipt.GasUsed = result.UsedGas

	// If the transaction created a contract, store the creation address in the receipt.
	if msg.To() == nil {
		receipt.ContractAddress = crypto.CreateAddress(evm.TxContext.Origin, tx_nonce)
	}

	// Set the receipt logs and create the bloom filter.
	receipt.Logs = statedb.GetLogs(tx_hash, header.Hash())
	receipt.BlockHash = header.Hash()
	receipt.BlockNumber = header.Number
	receipt.TransactionIndex = uint(statedb.TxIndex())
	for _, receiptProcessor := range receiptProcessors {
		receiptProcessor.Apply(receipt)
	}
	return receipt, err
}
